
import React, { useState, useCallback } from 'react';
import { Header } from './components/Header';
import { CommandInput } from './components/CommandInput';
import { CommandOutput } from './components/CommandOutput';
import { generateTermuxCommand } from './services/geminiService';

const App: React.FC = () => {
  const [prompt, setPrompt] = useState<string>('');
  const [generatedCommand, setGeneratedCommand] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = useCallback(async () => {
    if (!prompt.trim()) {
      setError('Please enter a description of the command you want to generate.');
      return;
    }
    setIsLoading(true);
    setError(null);
    setGeneratedCommand('');

    try {
      const command = await generateTermuxCommand(prompt);
      setGeneratedCommand(command);
    } catch (err) {
      setError('Failed to generate command. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, [prompt]);

  return (
    <div className="min-h-screen bg-gray-900 text-gray-200 flex flex-col items-center p-4 sm:p-6">
      <div className="w-full max-w-3xl mx-auto">
        <Header />
        <main className="mt-8">
          <CommandInput
            prompt={prompt}
            setPrompt={setPrompt}
            onGenerate={handleGenerate}
            isLoading={isLoading}
          />
          {error && <p className="text-red-400 mt-4 text-center">{error}</p>}
          <CommandOutput
            command={generatedCommand}
            isLoading={isLoading}
          />
        </main>
         <footer className="text-center mt-12 text-gray-500 text-sm">
            <p>Generated by AI. Always review commands before execution.</p>
        </footer>
      </div>
    </div>
  );
};

export default App;
